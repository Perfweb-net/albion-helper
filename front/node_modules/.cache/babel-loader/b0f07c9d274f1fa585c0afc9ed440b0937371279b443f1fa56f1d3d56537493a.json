{"ast":null,"code":"var _jsxFileName = \"/Users/psaugues/projet/symfony/albion-helper/front/src/components/PrivateRoute.jsx\";\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode'; // Utilisation de l'importation nommée\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isTokenValid = token => {\n  if (!token) return false;\n  try {\n    // Décoder le token\n    const decodedToken = jwtDecode(token);\n    const currentTime = Date.now() / 1000; // En secondes\n\n    // Vérifier si le token est expiré\n    return decodedToken.exp > currentTime;\n  } catch (error) {\n    console.error('Invalid token:', error);\n    return false;\n  }\n};\n\n// Composant pour protéger les routes\nconst PrivateRoute = ({\n  element\n}) => {\n  const token = localStorage.getItem('token');\n  const isAuthenticated = token && isTokenValid(token);\n  return isAuthenticated ? element : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/\",\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 40\n  }, this);\n};\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Navigate","jwtDecode","jsxDEV","_jsxDEV","isTokenValid","token","decodedToken","currentTime","Date","now","exp","error","console","PrivateRoute","element","localStorage","getItem","isAuthenticated","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/psaugues/projet/symfony/albion-helper/front/src/components/PrivateRoute.jsx"],"sourcesContent":["import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';  // Utilisation de l'importation nommée\n\nconst isTokenValid = (token) => {\n    if (!token) return false;\n\n    try {\n        // Décoder le token\n        const decodedToken = jwtDecode(token);\n        const currentTime = Date.now() / 1000; // En secondes\n\n        // Vérifier si le token est expiré\n        return decodedToken.exp > currentTime;\n    } catch (error) {\n        console.error('Invalid token:', error);\n        return false;\n    }\n};\n\n// Composant pour protéger les routes\nconst PrivateRoute = ({ element }) => {\n    const token = localStorage.getItem('token');\n    const isAuthenticated = token && isTokenValid(token);\n\n    return isAuthenticated ? element : <Navigate to=\"/\" replace />;\n};\n\nexport default PrivateRoute;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,SAAS,QAAQ,YAAY,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAC5B,IAAI,CAACA,KAAK,EAAE,OAAO,KAAK;EAExB,IAAI;IACA;IACA,MAAMC,YAAY,GAAGL,SAAS,CAACI,KAAK,CAAC;IACrC,MAAME,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;;IAEvC;IACA,OAAOH,YAAY,CAACI,GAAG,GAAGH,WAAW;EACzC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,OAAO,KAAK;EAChB;AACJ,CAAC;;AAED;AACA,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAClC,MAAMT,KAAK,GAAGU,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMC,eAAe,GAAGZ,KAAK,IAAID,YAAY,CAACC,KAAK,CAAC;EAEpD,OAAOY,eAAe,GAAGH,OAAO,gBAAGX,OAAA,CAACH,QAAQ;IAACkB,EAAE,EAAC,GAAG;IAACC,OAAO;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClE,CAAC;AAACC,EAAA,GALIX,YAAY;AAOlB,eAAeA,YAAY;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}