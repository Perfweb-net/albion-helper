{"ast":null,"code":"var _jsxFileName = \"/Users/psaugues/projet/symfony/albion-helper/front/src/components/PrivateRoute.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nimport api from \"../authApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const isTokenValid = async token => {\n  if (!token) return false;\n  try {\n    // Décoder le token\n    const decodedToken = jwtDecode(token);\n    const currentTime = Date.now() / 1000; // En secondes\n    const expirationTime = decodedToken.exp; // Temps d'expiration du token\n\n    // Vérifier si le token est expiré\n    if (expirationTime <= currentTime) {\n      return false;\n    }\n\n    // Vérifier si le token expire dans moins de 5 minutes (300 secondes)\n    const timeLeft = expirationTime - currentTime;\n    if (timeLeft <= 300) {\n      // 5 minutes en secondes\n      await api.post('/token/refresh').then(response => {\n        const newToken = response.data.token;\n        localStorage.setItem('token', newToken);\n      }).catch(error => {\n        console.error('Error refreshing token:', error);\n      });\n    }\n\n    // Si le token n'est pas expiré et n'expire pas dans les 5 prochaines minutes\n    return true;\n  } catch (error) {\n    console.error('Invalid token:', error);\n    return false;\n  }\n};\n\n// Composant pour protéger les routes\nconst PrivateRoute = ({\n  element\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(null); // State for auth status\n\n  useEffect(() => {\n    const checkToken = async () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        const valid = await isTokenValid(token);\n        setIsAuthenticated(valid);\n      } else {\n        setIsAuthenticated(false); // If there's no token, set as unauthenticated\n      }\n    };\n    checkToken(); // Check authentication status when component mounts\n  }, []); // Empty dependency array to run only once on mount\n\n  if (isAuthenticated === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 16\n    }, this); // Optionally show a loading spinner or similar\n  }\n  return isAuthenticated ? element : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/\",\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 40\n  }, this);\n};\n_s(PrivateRoute, \"ZTMIcZ3KFUL4S6fmpEYhW5p5Z1I=\");\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","useState","useEffect","Navigate","jwtDecode","api","jsxDEV","_jsxDEV","isTokenValid","token","decodedToken","currentTime","Date","now","expirationTime","exp","timeLeft","post","then","response","newToken","data","localStorage","setItem","catch","error","console","PrivateRoute","element","_s","isAuthenticated","setIsAuthenticated","checkToken","getItem","valid","children","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","_c","$RefreshReg$"],"sources":["/Users/psaugues/projet/symfony/albion-helper/front/src/components/PrivateRoute.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nimport api from \"../authApi\";\n\nexport const isTokenValid = async (token) => {\n    if (!token) return false;\n\n    try {\n        // Décoder le token\n        const decodedToken = jwtDecode(token);\n        const currentTime = Date.now() / 1000; // En secondes\n        const expirationTime = decodedToken.exp; // Temps d'expiration du token\n\n        // Vérifier si le token est expiré\n        if (expirationTime <= currentTime) {\n            return false;\n        }\n\n        // Vérifier si le token expire dans moins de 5 minutes (300 secondes)\n        const timeLeft = expirationTime - currentTime;\n        if (timeLeft <= 300) {  // 5 minutes en secondes\n            await api.post('/token/refresh').then((response) => {\n                const newToken = response.data.token;\n                localStorage.setItem('token', newToken);\n            }).catch((error) => {\n                console.error('Error refreshing token:', error);\n            });\n        }\n\n        // Si le token n'est pas expiré et n'expire pas dans les 5 prochaines minutes\n        return true;\n    } catch (error) {\n        console.error('Invalid token:', error);\n        return false;\n    }\n};\n\n// Composant pour protéger les routes\nconst PrivateRoute = ({ element }) => {\n    const [isAuthenticated, setIsAuthenticated] = useState(null); // State for auth status\n\n    useEffect(() => {\n        const checkToken = async () => {\n            const token = localStorage.getItem('token');\n            if (token) {\n                const valid = await isTokenValid(token);\n                setIsAuthenticated(valid);\n            } else {\n                setIsAuthenticated(false); // If there's no token, set as unauthenticated\n            }\n        };\n\n        checkToken(); // Check authentication status when component mounts\n    }, []); // Empty dependency array to run only once on mount\n\n    if (isAuthenticated === null) {\n        return <div>Loading...</div>; // Optionally show a loading spinner or similar\n    }\n\n    return isAuthenticated ? element : <Navigate to=\"/\" replace />;\n};\n\nexport default PrivateRoute;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,SAAS,QAAQ,YAAY;AACtC,OAAOC,GAAG,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,OAAO,MAAMC,YAAY,GAAG,MAAOC,KAAK,IAAK;EACzC,IAAI,CAACA,KAAK,EAAE,OAAO,KAAK;EAExB,IAAI;IACA;IACA,MAAMC,YAAY,GAAGN,SAAS,CAACK,KAAK,CAAC;IACrC,MAAME,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IACvC,MAAMC,cAAc,GAAGJ,YAAY,CAACK,GAAG,CAAC,CAAC;;IAEzC;IACA,IAAID,cAAc,IAAIH,WAAW,EAAE;MAC/B,OAAO,KAAK;IAChB;;IAEA;IACA,MAAMK,QAAQ,GAAGF,cAAc,GAAGH,WAAW;IAC7C,IAAIK,QAAQ,IAAI,GAAG,EAAE;MAAG;MACpB,MAAMX,GAAG,CAACY,IAAI,CAAC,gBAAgB,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;QAChD,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,IAAI,CAACZ,KAAK;QACpCa,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAAC;MAC3C,CAAC,CAAC,CAACI,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACnD,CAAC,CAAC;IACN;;IAEA;IACA,OAAO,IAAI;EACf,CAAC,CAAC,OAAOA,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,OAAO,KAAK;EAChB;AACJ,CAAC;;AAED;AACA,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9DC,SAAS,CAAC,MAAM;IACZ,MAAM8B,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,MAAMvB,KAAK,GAAGa,YAAY,CAACW,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIxB,KAAK,EAAE;QACP,MAAMyB,KAAK,GAAG,MAAM1B,YAAY,CAACC,KAAK,CAAC;QACvCsB,kBAAkB,CAACG,KAAK,CAAC;MAC7B,CAAC,MAAM;QACHH,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;MAC/B;IACJ,CAAC;IAEDC,UAAU,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,IAAIF,eAAe,KAAK,IAAI,EAAE;IAC1B,oBAAOvB,OAAA;MAAA4B,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC,CAAC;EAClC;EAEA,OAAOT,eAAe,GAAGF,OAAO,gBAAGrB,OAAA,CAACJ,QAAQ;IAACqC,EAAE,EAAC,GAAG;IAACC,OAAO;EAAA;IAAAL,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClE,CAAC;AAACV,EAAA,CAtBIF,YAAY;AAAAe,EAAA,GAAZf,YAAY;AAwBlB,eAAeA,YAAY;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}