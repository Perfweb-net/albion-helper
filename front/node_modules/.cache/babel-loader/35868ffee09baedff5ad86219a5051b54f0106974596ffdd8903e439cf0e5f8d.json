{"ast":null,"code":"var _jsxFileName = \"/Users/psaugues/projet/symfony/albion-helper/front/src/components/PrivateRoute.jsx\";\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nimport api from \"../authApi\"; // Utilisation de l'importation nommée\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const isTokenValid = async token => {\n  if (!token) return false;\n  try {\n    // Décoder le token\n    const decodedToken = jwtDecode(token);\n    const currentTime = Date.now() / 1000; // En secondes\n    const expirationTime = decodedToken.exp; // Temps d'expiration du token\n\n    // Vérifier si le token est expiré\n    if (expirationTime <= currentTime) {\n      return false;\n    }\n\n    // Vérifier si le token expire dans moins de 5 minutes (300 secondes)\n    const timeLeft = expirationTime - currentTime;\n    if (timeLeft <= 300) {\n      // 5 minutes en secondes\n      await api.post('/token/refresh');\n    }\n\n    // Si le token n'est pas expiré et n'expire pas dans les 5 prochaines minutes\n    return true;\n  } catch (error) {\n    console.error('Invalid token:', error);\n    return false;\n  }\n};\n\n// Composant pour protéger les routes\nconst PrivateRoute = async ({\n  element\n}) => {\n  const token = localStorage.getItem('token');\n  const isAuthenticated = token && (await isTokenValid(token));\n  return isAuthenticated ? element : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/\",\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 40\n  }, this);\n};\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Navigate","jwtDecode","api","jsxDEV","_jsxDEV","isTokenValid","token","decodedToken","currentTime","Date","now","expirationTime","exp","timeLeft","post","error","console","PrivateRoute","element","localStorage","getItem","isAuthenticated","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/psaugues/projet/symfony/albion-helper/front/src/components/PrivateRoute.jsx"],"sourcesContent":["import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nimport api from \"../authApi\";  // Utilisation de l'importation nommée\n\nexport const isTokenValid = async (token) => {\n    if (!token) return false;\n\n    try {\n        // Décoder le token\n        const decodedToken = jwtDecode(token);\n        const currentTime = Date.now() / 1000; // En secondes\n        const expirationTime = decodedToken.exp; // Temps d'expiration du token\n\n        // Vérifier si le token est expiré\n        if (expirationTime <= currentTime) {\n            return false;\n        }\n\n        // Vérifier si le token expire dans moins de 5 minutes (300 secondes)\n        const timeLeft = expirationTime - currentTime;\n        if (timeLeft <= 300) {  // 5 minutes en secondes\n            await api.post('/token/refresh');\n        }\n\n        // Si le token n'est pas expiré et n'expire pas dans les 5 prochaines minutes\n        return true;\n    } catch (error) {\n        console.error('Invalid token:', error);\n        return false;\n    }\n};\n\n// Composant pour protéger les routes\nconst PrivateRoute = async ({element}) => {\n    const token = localStorage.getItem('token');\n    const isAuthenticated = token && await isTokenValid(token);\n\n    return isAuthenticated ? element : <Navigate to=\"/\" replace/>;\n};\n\nexport default PrivateRoute;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,SAAS,QAAQ,YAAY;AACtC,OAAOC,GAAG,MAAM,YAAY,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/B,OAAO,MAAMC,YAAY,GAAG,MAAOC,KAAK,IAAK;EACzC,IAAI,CAACA,KAAK,EAAE,OAAO,KAAK;EAExB,IAAI;IACA;IACA,MAAMC,YAAY,GAAGN,SAAS,CAACK,KAAK,CAAC;IACrC,MAAME,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IACvC,MAAMC,cAAc,GAAGJ,YAAY,CAACK,GAAG,CAAC,CAAC;;IAEzC;IACA,IAAID,cAAc,IAAIH,WAAW,EAAE;MAC/B,OAAO,KAAK;IAChB;;IAEA;IACA,MAAMK,QAAQ,GAAGF,cAAc,GAAGH,WAAW;IAC7C,IAAIK,QAAQ,IAAI,GAAG,EAAE;MAAG;MACpB,MAAMX,GAAG,CAACY,IAAI,CAAC,gBAAgB,CAAC;IACpC;;IAEA;IACA,OAAO,IAAI;EACf,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,OAAO,KAAK;EAChB;AACJ,CAAC;;AAED;AACA,MAAME,YAAY,GAAG,MAAAA,CAAO;EAACC;AAAO,CAAC,KAAK;EACtC,MAAMZ,KAAK,GAAGa,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMC,eAAe,GAAGf,KAAK,KAAI,MAAMD,YAAY,CAACC,KAAK,CAAC;EAE1D,OAAOe,eAAe,GAAGH,OAAO,gBAAGd,OAAA,CAACJ,QAAQ;IAACsB,EAAE,EAAC,GAAG;IAACC,OAAO;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AACjE,CAAC;AAACC,EAAA,GALIX,YAAY;AAOlB,eAAeA,YAAY;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}